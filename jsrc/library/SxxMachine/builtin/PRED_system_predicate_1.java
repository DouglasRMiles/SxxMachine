package SxxMachine.builtin;
/*
 system_predicate/1 defined in 'system.pl'
 This file is generated by Prolog Cafe.
 PLEASE DO NOT EDIT!
*/
import SxxMachine.Operation;
import SxxMachine.Predicate;
import SxxMachine.Prolog;
import SxxMachine.SymbolTerm;
import SxxMachine.Term; 


public final class PRED_system_predicate_1 extends Predicate.P1 {
    private static final SymbolTerm s2 = SYM("true");
    private static final SymbolTerm s3 = SYM("therwise");
    private static final SymbolTerm s4 = SYM("fail");
    private static final SymbolTerm s5 = SYM("false");
    private static final SymbolTerm s6 = SYM("!");
    private static final SymbolTerm s8 = SYM("$neck_cut");
    private static final SymbolTerm s129 = SYM("flush_output");
    private static final SymbolTerm s143 = SYM("nl");
    private static final SymbolTerm s179 = SYM("repeat");
    private static final SymbolTerm s191 = SYM("halt");
    private static final SymbolTerm s193 = SYM("abort");
    private static final SymbolTerm s226 = SYM("cafeteria");
    private static final SymbolTerm s228 = SYM("trace");
    private static final SymbolTerm s229 = SYM("notrace");
    private static final SymbolTerm s230 = SYM("debug");
    private static final SymbolTerm s231 = SYM("nodebug");
    private static final SymbolTerm s235 = SYM("nospyall");
    private static final SymbolTerm s236 = SYM("listing");
    private static final Operation fail_0 = SxxMachine.Failure.FAIL_0;
    private static final java.util.HashMap<Term, Operation> con = new java.util.HashMap<Term, Operation>(18);
    private static final java.util.HashMap<Term, Operation> str = new java.util.HashMap<Term, Operation>(222);
    static {
        con.put(s2, PRED_system_predicate_1::system_predicate_1_2);
        con.put(s3, PRED_system_predicate_1::system_predicate_1_3);
        con.put(s4, PRED_system_predicate_1::system_predicate_1_4);
        con.put(s5, PRED_system_predicate_1::system_predicate_1_5);
        con.put(s6, PRED_system_predicate_1::system_predicate_1_6);
        con.put(s8, PRED_system_predicate_1::system_predicate_1_8);
        con.put(s129, PRED_system_predicate_1::system_predicate_1_129);
        con.put(s143, PRED_system_predicate_1::system_predicate_1_143);
        con.put(s179, PRED_system_predicate_1::system_predicate_1_179);
        con.put(s191, PRED_system_predicate_1::system_predicate_1_191);
        con.put(s193, PRED_system_predicate_1::system_predicate_1_193);
        con.put(s226, PRED_system_predicate_1::system_predicate_1_226);
        con.put(s228, PRED_system_predicate_1::system_predicate_1_228);
        con.put(s229, PRED_system_predicate_1::system_predicate_1_229);
        con.put(s230, PRED_system_predicate_1::system_predicate_1_230);
        con.put(s231, PRED_system_predicate_1::system_predicate_1_231);
        con.put(s235, PRED_system_predicate_1::system_predicate_1_235);
        con.put(s236, PRED_system_predicate_1::system_predicate_1_236);
        str.put(F("system_predicate",1), PRED_system_predicate_1::system_predicate_1_1);
        str.put(F("$get_level",1), PRED_system_predicate_1::system_predicate_1_7);
        str.put(F("$cut",1), PRED_system_predicate_1::system_predicate_1_9);
        str.put(F("^",2), PRED_system_predicate_1::system_predicate_1_10);
        str.put(F(",",2), PRED_system_predicate_1::system_predicate_1_11);
        str.put(F(";",2), PRED_system_predicate_1::system_predicate_1_12);
        str.put(F("->",2), PRED_system_predicate_1::system_predicate_1_13);
        str.put(F("call",1), PRED_system_predicate_1::system_predicate_1_14);
        str.put(F("catch",3), PRED_system_predicate_1::system_predicate_1_15);
        str.put(F("throw",1), PRED_system_predicate_1::system_predicate_1_16);
        str.put(F("on_exception",3), PRED_system_predicate_1::system_predicate_1_17);
        str.put(F("raise_exception",1), PRED_system_predicate_1::system_predicate_1_18);
        str.put(F("=",2), PRED_system_predicate_1::system_predicate_1_19);
        str.put(F("$unify",2), PRED_system_predicate_1::system_predicate_1_20);
        str.put(F("\\=",2), PRED_system_predicate_1::system_predicate_1_21);
        str.put(F("$not_unifiable",2), PRED_system_predicate_1::system_predicate_1_22);
        str.put(F("var",1), PRED_system_predicate_1::system_predicate_1_23);
        str.put(F("atom",1), PRED_system_predicate_1::system_predicate_1_24);
        str.put(F("integer",1), PRED_system_predicate_1::system_predicate_1_25);
        str.put(F("long",1), PRED_system_predicate_1::system_predicate_1_26);
        str.put(F("float",1), PRED_system_predicate_1::system_predicate_1_27);
        str.put(F("atomic",1), PRED_system_predicate_1::system_predicate_1_28);
        str.put(F("compound",1), PRED_system_predicate_1::system_predicate_1_29);
        str.put(F("nonvar",1), PRED_system_predicate_1::system_predicate_1_30);
        str.put(F("number",1), PRED_system_predicate_1::system_predicate_1_31);
        str.put(F("java",1), PRED_system_predicate_1::system_predicate_1_32);
        str.put(F("java",2), PRED_system_predicate_1::system_predicate_1_33);
        str.put(F("closure",1), PRED_system_predicate_1::system_predicate_1_34);
        str.put(F("ground",1), PRED_system_predicate_1::system_predicate_1_35);
        str.put(F("callable",1), PRED_system_predicate_1::system_predicate_1_36);
        str.put(F("==",2), PRED_system_predicate_1::system_predicate_1_37);
        str.put(F("$equality_of_term",2), PRED_system_predicate_1::system_predicate_1_38);
        str.put(F("\\==",2), PRED_system_predicate_1::system_predicate_1_39);
        str.put(F("$inequality_of_term",2), PRED_system_predicate_1::system_predicate_1_40);
        str.put(F("@<",2), PRED_system_predicate_1::system_predicate_1_41);
        str.put(F("$before",2), PRED_system_predicate_1::system_predicate_1_42);
        str.put(F("@>",2), PRED_system_predicate_1::system_predicate_1_43);
        str.put(F("$after",2), PRED_system_predicate_1::system_predicate_1_44);
        str.put(F("@=<",2), PRED_system_predicate_1::system_predicate_1_45);
        str.put(F("$not_after",2), PRED_system_predicate_1::system_predicate_1_46);
        str.put(F("@>=",2), PRED_system_predicate_1::system_predicate_1_47);
        str.put(F("$not_before",2), PRED_system_predicate_1::system_predicate_1_48);
        str.put(F("?=",2), PRED_system_predicate_1::system_predicate_1_49);
        str.put(F("$identical_or_cannot_unify",2), PRED_system_predicate_1::system_predicate_1_50);
        str.put(F("compare",3), PRED_system_predicate_1::system_predicate_1_51);
        str.put(F("sort",2), PRED_system_predicate_1::system_predicate_1_52);
        str.put(F("keysort",2), PRED_system_predicate_1::system_predicate_1_53);
        str.put(F("arg",3), PRED_system_predicate_1::system_predicate_1_54);
        str.put(F("functor",3), PRED_system_predicate_1::system_predicate_1_55);
        str.put(F("=..",2), PRED_system_predicate_1::system_predicate_1_56);
        str.put(F("$univ",2), PRED_system_predicate_1::system_predicate_1_57);
        str.put(F("copy_term",2), PRED_system_predicate_1::system_predicate_1_58);
        str.put(F("is",2), PRED_system_predicate_1::system_predicate_1_59);
        str.put(F("$abs",2), PRED_system_predicate_1::system_predicate_1_60);
        str.put(F("$asin",2), PRED_system_predicate_1::system_predicate_1_61);
        str.put(F("$acos",2), PRED_system_predicate_1::system_predicate_1_62);
        str.put(F("$atan",2), PRED_system_predicate_1::system_predicate_1_63);
        str.put(F("$bitwise_conj",3), PRED_system_predicate_1::system_predicate_1_64);
        str.put(F("$bitwise_disj",3), PRED_system_predicate_1::system_predicate_1_65);
        str.put(F("$bitwise_exclusive_or",3), PRED_system_predicate_1::system_predicate_1_66);
        str.put(F("$bitwise_neg",2), PRED_system_predicate_1::system_predicate_1_67);
        str.put(F("$ceil",2), PRED_system_predicate_1::system_predicate_1_68);
        str.put(F("$cos",2), PRED_system_predicate_1::system_predicate_1_69);
        str.put(F("$degrees",2), PRED_system_predicate_1::system_predicate_1_70);
        str.put(F("$exp",2), PRED_system_predicate_1::system_predicate_1_71);
        str.put(F("$float",2), PRED_system_predicate_1::system_predicate_1_72);
        str.put(F("$float_integer_part",2), PRED_system_predicate_1::system_predicate_1_73);
        str.put(F("$float_fractional_part",2), PRED_system_predicate_1::system_predicate_1_74);
        str.put(F("$float_quotient",3), PRED_system_predicate_1::system_predicate_1_75);
        str.put(F("$floor",2), PRED_system_predicate_1::system_predicate_1_76);
        str.put(F("$int_quotient",3), PRED_system_predicate_1::system_predicate_1_77);
        str.put(F("$log",2), PRED_system_predicate_1::system_predicate_1_78);
        str.put(F("$max",3), PRED_system_predicate_1::system_predicate_1_79);
        str.put(F("$min",3), PRED_system_predicate_1::system_predicate_1_80);
        str.put(F("$minus",3), PRED_system_predicate_1::system_predicate_1_81);
        str.put(F("$mod",3), PRED_system_predicate_1::system_predicate_1_82);
        str.put(F("$multi",3), PRED_system_predicate_1::system_predicate_1_83);
        str.put(F("$plus",3), PRED_system_predicate_1::system_predicate_1_84);
        str.put(F("$pow",3), PRED_system_predicate_1::system_predicate_1_85);
        str.put(F("$radians",2), PRED_system_predicate_1::system_predicate_1_86);
        str.put(F("$rint",2), PRED_system_predicate_1::system_predicate_1_87);
        str.put(F("$round",2), PRED_system_predicate_1::system_predicate_1_88);
        str.put(F("$shift_left",3), PRED_system_predicate_1::system_predicate_1_89);
        str.put(F("$shift_right",3), PRED_system_predicate_1::system_predicate_1_90);
        str.put(F("$sign",2), PRED_system_predicate_1::system_predicate_1_91);
        str.put(F("$sin",2), PRED_system_predicate_1::system_predicate_1_92);
        str.put(F("$sqrt",2), PRED_system_predicate_1::system_predicate_1_93);
        str.put(F("$tan",2), PRED_system_predicate_1::system_predicate_1_94);
        str.put(F("$truncate",2), PRED_system_predicate_1::system_predicate_1_95);
        str.put(F("=:=",2), PRED_system_predicate_1::system_predicate_1_96);
        str.put(F("$arith_equal",2), PRED_system_predicate_1::system_predicate_1_97);
        str.put(F("=\\=",2), PRED_system_predicate_1::system_predicate_1_98);
        str.put(F("$arith_not_equal",2), PRED_system_predicate_1::system_predicate_1_99);
        str.put(F("<",2), PRED_system_predicate_1::system_predicate_1_100);
        str.put(F("$less_than",2), PRED_system_predicate_1::system_predicate_1_101);
        str.put(F("=<",2), PRED_system_predicate_1::system_predicate_1_102);
        str.put(F("$less_or_equal",2), PRED_system_predicate_1::system_predicate_1_103);
        str.put(F(">",2), PRED_system_predicate_1::system_predicate_1_104);
        str.put(F("$greater_than",2), PRED_system_predicate_1::system_predicate_1_105);
        str.put(F(">=",2), PRED_system_predicate_1::system_predicate_1_106);
        str.put(F("$greater_or_equal",2), PRED_system_predicate_1::system_predicate_1_107);
        str.put(F("clause",2), PRED_system_predicate_1::system_predicate_1_108);
        str.put(F("initialization",2), PRED_system_predicate_1::system_predicate_1_109);
        str.put(F("$new_indexing_hash",3), PRED_system_predicate_1::system_predicate_1_110);
        str.put(F("assert",1), PRED_system_predicate_1::system_predicate_1_111);
        str.put(F("assertz",1), PRED_system_predicate_1::system_predicate_1_112);
        str.put(F("asserta",1), PRED_system_predicate_1::system_predicate_1_113);
        str.put(F("retract",1), PRED_system_predicate_1::system_predicate_1_114);
        str.put(F("abolish",1), PRED_system_predicate_1::system_predicate_1_115);
        str.put(F("retractall",1), PRED_system_predicate_1::system_predicate_1_116);
        str.put(F("findall",3), PRED_system_predicate_1::system_predicate_1_117);
        str.put(F("bagof",3), PRED_system_predicate_1::system_predicate_1_118);
        str.put(F("setof",3), PRED_system_predicate_1::system_predicate_1_119);
        str.put(F("current_input",1), PRED_system_predicate_1::system_predicate_1_120);
        str.put(F("current_output",1), PRED_system_predicate_1::system_predicate_1_121);
        str.put(F("set_input",1), PRED_system_predicate_1::system_predicate_1_122);
        str.put(F("set_output",1), PRED_system_predicate_1::system_predicate_1_123);
        str.put(F("open",3), PRED_system_predicate_1::system_predicate_1_124);
        str.put(F("open",4), PRED_system_predicate_1::system_predicate_1_125);
        str.put(F("close",1), PRED_system_predicate_1::system_predicate_1_126);
        str.put(F("close",2), PRED_system_predicate_1::system_predicate_1_127);
        str.put(F("flush_output",1), PRED_system_predicate_1::system_predicate_1_128);
        str.put(F("stream_property",2), PRED_system_predicate_1::system_predicate_1_130);
        str.put(F("get_char",1), PRED_system_predicate_1::system_predicate_1_131);
        str.put(F("get_char",2), PRED_system_predicate_1::system_predicate_1_132);
        str.put(F("get_code",1), PRED_system_predicate_1::system_predicate_1_133);
        str.put(F("get_code",2), PRED_system_predicate_1::system_predicate_1_134);
        str.put(F("peek_char",1), PRED_system_predicate_1::system_predicate_1_135);
        str.put(F("peek_char",2), PRED_system_predicate_1::system_predicate_1_136);
        str.put(F("peek_code",1), PRED_system_predicate_1::system_predicate_1_137);
        str.put(F("peek_code",2), PRED_system_predicate_1::system_predicate_1_138);
        str.put(F("put_char",1), PRED_system_predicate_1::system_predicate_1_139);
        str.put(F("put_char",2), PRED_system_predicate_1::system_predicate_1_140);
        str.put(F("put_code",1), PRED_system_predicate_1::system_predicate_1_141);
        str.put(F("put_code",2), PRED_system_predicate_1::system_predicate_1_142);
        str.put(F("nl",1), PRED_system_predicate_1::system_predicate_1_144);
        str.put(F("get0",1), PRED_system_predicate_1::system_predicate_1_145);
        str.put(F("get0",2), PRED_system_predicate_1::system_predicate_1_146);
        str.put(F("get",1), PRED_system_predicate_1::system_predicate_1_147);
        str.put(F("get",2), PRED_system_predicate_1::system_predicate_1_148);
        str.put(F("put",1), PRED_system_predicate_1::system_predicate_1_149);
        str.put(F("put",2), PRED_system_predicate_1::system_predicate_1_150);
        str.put(F("tab",1), PRED_system_predicate_1::system_predicate_1_151);
        str.put(F("tab",2), PRED_system_predicate_1::system_predicate_1_152);
        str.put(F("skip",1), PRED_system_predicate_1::system_predicate_1_153);
        str.put(F("skip",2), PRED_system_predicate_1::system_predicate_1_154);
        str.put(F("get_byte",1), PRED_system_predicate_1::system_predicate_1_155);
        str.put(F("get_byte",2), PRED_system_predicate_1::system_predicate_1_156);
        str.put(F("peek_byte",1), PRED_system_predicate_1::system_predicate_1_157);
        str.put(F("peek_byte",2), PRED_system_predicate_1::system_predicate_1_158);
        str.put(F("put_byte",1), PRED_system_predicate_1::system_predicate_1_159);
        str.put(F("put_byte",2), PRED_system_predicate_1::system_predicate_1_160);
        str.put(F("read",1), PRED_system_predicate_1::system_predicate_1_161);
        str.put(F("read",2), PRED_system_predicate_1::system_predicate_1_162);
        str.put(F("read_with_variables",2), PRED_system_predicate_1::system_predicate_1_163);
        str.put(F("read_with_variables",3), PRED_system_predicate_1::system_predicate_1_164);
        str.put(F("read_line",1), PRED_system_predicate_1::system_predicate_1_165);
        str.put(F("read_line",2), PRED_system_predicate_1::system_predicate_1_166);
        str.put(F("write",1), PRED_system_predicate_1::system_predicate_1_167);
        str.put(F("write",2), PRED_system_predicate_1::system_predicate_1_168);
        str.put(F("writeq",1), PRED_system_predicate_1::system_predicate_1_169);
        str.put(F("writeq",2), PRED_system_predicate_1::system_predicate_1_170);
        str.put(F("write_canonical",1), PRED_system_predicate_1::system_predicate_1_171);
        str.put(F("write_canonical",2), PRED_system_predicate_1::system_predicate_1_172);
        str.put(F("write_term",2), PRED_system_predicate_1::system_predicate_1_173);
        str.put(F("write_term",3), PRED_system_predicate_1::system_predicate_1_174);
        str.put(F("op",3), PRED_system_predicate_1::system_predicate_1_175);
        str.put(F("current_op",3), PRED_system_predicate_1::system_predicate_1_176);
        str.put(F("\\+",1), PRED_system_predicate_1::system_predicate_1_177);
        str.put(F("once",1), PRED_system_predicate_1::system_predicate_1_178);
        str.put(F("atom_length",2), PRED_system_predicate_1::system_predicate_1_180);
        str.put(F("atom_concat",3), PRED_system_predicate_1::system_predicate_1_181);
        str.put(F("sub_atom",5), PRED_system_predicate_1::system_predicate_1_182);
        str.put(F("atom_chars",2), PRED_system_predicate_1::system_predicate_1_183);
        str.put(F("atom_codes",2), PRED_system_predicate_1::system_predicate_1_184);
        str.put(F("char_code",2), PRED_system_predicate_1::system_predicate_1_185);
        str.put(F("number_chars",2), PRED_system_predicate_1::system_predicate_1_186);
        str.put(F("number_codes",2), PRED_system_predicate_1::system_predicate_1_187);
        str.put(F("name",2), PRED_system_predicate_1::system_predicate_1_188);
        str.put(F("set_prolog_flag",2), PRED_system_predicate_1::system_predicate_1_189);
        str.put(F("current_prolog_flag",2), PRED_system_predicate_1::system_predicate_1_190);
        str.put(F("halt",1), PRED_system_predicate_1::system_predicate_1_192);
        str.put(F("C",3), PRED_system_predicate_1::system_predicate_1_194);
        str.put(F("expand_term",2), PRED_system_predicate_1::system_predicate_1_195);
        str.put(F("new_hash",1), PRED_system_predicate_1::system_predicate_1_196);
        str.put(F("new_hash",2), PRED_system_predicate_1::system_predicate_1_197);
        str.put(F("hash_clear",1), PRED_system_predicate_1::system_predicate_1_198);
        str.put(F("hash_contains_key",2), PRED_system_predicate_1::system_predicate_1_199);
        str.put(F("hash_get",3), PRED_system_predicate_1::system_predicate_1_200);
        str.put(F("hash_is_empty",1), PRED_system_predicate_1::system_predicate_1_201);
        str.put(F("hash_keys",2), PRED_system_predicate_1::system_predicate_1_202);
        str.put(F("hash_map",2), PRED_system_predicate_1::system_predicate_1_203);
        str.put(F("hash_put",3), PRED_system_predicate_1::system_predicate_1_204);
        str.put(F("hash_remove",2), PRED_system_predicate_1::system_predicate_1_205);
        str.put(F("hash_size",2), PRED_system_predicate_1::system_predicate_1_206);
        str.put(F("$get_hash_manager",1), PRED_system_predicate_1::system_predicate_1_207);
        str.put(F("java_constructor0",2), PRED_system_predicate_1::system_predicate_1_208);
        str.put(F("java_constructor",2), PRED_system_predicate_1::system_predicate_1_209);
        str.put(F("java_declared_constructor0",2), PRED_system_predicate_1::system_predicate_1_210);
        str.put(F("java_declared_constructor",2), PRED_system_predicate_1::system_predicate_1_211);
        str.put(F("java_method0",3), PRED_system_predicate_1::system_predicate_1_212);
        str.put(F("java_method",3), PRED_system_predicate_1::system_predicate_1_213);
        str.put(F("java_declared_method0",3), PRED_system_predicate_1::system_predicate_1_214);
        str.put(F("java_declared_method",3), PRED_system_predicate_1::system_predicate_1_215);
        str.put(F("java_get_field0",3), PRED_system_predicate_1::system_predicate_1_216);
        str.put(F("java_get_field",3), PRED_system_predicate_1::system_predicate_1_217);
        str.put(F("java_get_declared_field0",3), PRED_system_predicate_1::system_predicate_1_218);
        str.put(F("java_get_declared_field",3), PRED_system_predicate_1::system_predicate_1_219);
        str.put(F("java_set_field0",3), PRED_system_predicate_1::system_predicate_1_220);
        str.put(F("java_set_field",3), PRED_system_predicate_1::system_predicate_1_221);
        str.put(F("java_set_declared_field0",3), PRED_system_predicate_1::system_predicate_1_222);
        str.put(F("java_set_declared_field",3), PRED_system_predicate_1::system_predicate_1_223);
        str.put(F("synchronized",2), PRED_system_predicate_1::system_predicate_1_224);
        str.put(F("java_conversion",2), PRED_system_predicate_1::system_predicate_1_225);
        str.put(F("consult",1), PRED_system_predicate_1::system_predicate_1_227);
        str.put(F("leash",1), PRED_system_predicate_1::system_predicate_1_232);
        str.put(F("spy",1), PRED_system_predicate_1::system_predicate_1_233);
        str.put(F("nospy",1), PRED_system_predicate_1::system_predicate_1_234);
        str.put(F("listing",1), PRED_system_predicate_1::system_predicate_1_237);
        str.put(F("length",2), PRED_system_predicate_1::system_predicate_1_238);
        str.put(F("numbervars",3), PRED_system_predicate_1::system_predicate_1_239);
        str.put(F("statistics",2), PRED_system_predicate_1::system_predicate_1_240);
    }

    public PRED_system_predicate_1(Term a1, Operation cont) {
        this.LARG[0] = a1;
        this.cont = cont;
    }

    @Override
    public void toString(StringBuilder sb) {
        sb.append("system_predicate(");
        this.LARG[0].toQuotedString(0, sb);
        sb.append(")");
    }


    @Override
    public Operation exec(Prolog engine) {
        engine.AREGS[0] = this.LARG[0];
        engine.cont = this.cont;
		return static_exec(engine);
    }

    public static Operation static_exec(Prolog engine) { 
        engine.setB0();
        {        //START inline expansion of switch_on_term

            Term x = engine.AREGS[0].dref();
            if (x .isVar()) {
                return system_predicate_1_var(engine);
            }
            if (x .isCons()) {
                return engine.fail();
            }
            if (x .isStructure()) {
                return system_predicate_1_str(engine);
            }
            if (x .isSymbol()) {
                return system_predicate_1_con(engine);
            }
            if (x .isInteger()) {
                return engine.fail();
            }
            if (x .isDouble()) {
                return engine.fail();
            }
            return system_predicate_1_var(engine);
        }        //END inline expansion

    }

    private final static Operation system_predicate_1_var(Prolog engine) {
        engine.jtry1(null, PRED_system_predicate_1::system_predicate_1_var_1);
        return system_predicate_1_1(engine);
    }

    private final static Operation system_predicate_1_var_1(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_2);
        return system_predicate_1_2(engine);
    }

    private final static Operation system_predicate_1_var_2(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_3);
        return system_predicate_1_3(engine);
    }

    private final static Operation system_predicate_1_var_3(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_4);
        return system_predicate_1_4(engine);
    }

    private final static Operation system_predicate_1_var_4(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_5);
        return system_predicate_1_5(engine);
    }

    private final static Operation system_predicate_1_var_5(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_6);
        return system_predicate_1_6(engine);
    }

    private final static Operation system_predicate_1_var_6(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_7);
        return system_predicate_1_7(engine);
    }

    private final static Operation system_predicate_1_var_7(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_8);
        return system_predicate_1_8(engine);
    }

    private final static Operation system_predicate_1_var_8(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_9);
        return system_predicate_1_9(engine);
    }

    private final static Operation system_predicate_1_var_9(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_10);
        return system_predicate_1_10(engine);
    }

    private final static Operation system_predicate_1_var_10(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_11);
        return system_predicate_1_11(engine);
    }

    private final static Operation system_predicate_1_var_11(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_12);
        return system_predicate_1_12(engine);
    }

    private final static Operation system_predicate_1_var_12(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_13);
        return system_predicate_1_13(engine);
    }

    private final static Operation system_predicate_1_var_13(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_14);
        return system_predicate_1_14(engine);
    }

    private final static Operation system_predicate_1_var_14(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_15);
        return system_predicate_1_15(engine);
    }

    private final static Operation system_predicate_1_var_15(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_16);
        return system_predicate_1_16(engine);
    }

    private final static Operation system_predicate_1_var_16(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_17);
        return system_predicate_1_17(engine);
    }

    private final static Operation system_predicate_1_var_17(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_18);
        return system_predicate_1_18(engine);
    }

    private final static Operation system_predicate_1_var_18(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_19);
        return system_predicate_1_19(engine);
    }

    private final static Operation system_predicate_1_var_19(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_20);
        return system_predicate_1_20(engine);
    }

    private final static Operation system_predicate_1_var_20(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_21);
        return system_predicate_1_21(engine);
    }

    private final static Operation system_predicate_1_var_21(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_22);
        return system_predicate_1_22(engine);
    }

    private final static Operation system_predicate_1_var_22(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_23);
        return system_predicate_1_23(engine);
    }

    private final static Operation system_predicate_1_var_23(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_24);
        return system_predicate_1_24(engine);
    }

    private final static Operation system_predicate_1_var_24(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_25);
        return system_predicate_1_25(engine);
    }

    private final static Operation system_predicate_1_var_25(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_26);
        return system_predicate_1_26(engine);
    }

    private final static Operation system_predicate_1_var_26(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_27);
        return system_predicate_1_27(engine);
    }

    private final static Operation system_predicate_1_var_27(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_28);
        return system_predicate_1_28(engine);
    }

    private final static Operation system_predicate_1_var_28(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_29);
        return system_predicate_1_29(engine);
    }

    private final static Operation system_predicate_1_var_29(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_30);
        return system_predicate_1_30(engine);
    }

    private final static Operation system_predicate_1_var_30(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_31);
        return system_predicate_1_31(engine);
    }

    private final static Operation system_predicate_1_var_31(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_32);
        return system_predicate_1_32(engine);
    }

    private final static Operation system_predicate_1_var_32(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_33);
        return system_predicate_1_33(engine);
    }

    private final static Operation system_predicate_1_var_33(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_34);
        return system_predicate_1_34(engine);
    }

    private final static Operation system_predicate_1_var_34(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_35);
        return system_predicate_1_35(engine);
    }

    private final static Operation system_predicate_1_var_35(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_36);
        return system_predicate_1_36(engine);
    }

    private final static Operation system_predicate_1_var_36(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_37);
        return system_predicate_1_37(engine);
    }

    private final static Operation system_predicate_1_var_37(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_38);
        return system_predicate_1_38(engine);
    }

    private final static Operation system_predicate_1_var_38(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_39);
        return system_predicate_1_39(engine);
    }

    private final static Operation system_predicate_1_var_39(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_40);
        return system_predicate_1_40(engine);
    }

    private final static Operation system_predicate_1_var_40(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_41);
        return system_predicate_1_41(engine);
    }

    private final static Operation system_predicate_1_var_41(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_42);
        return system_predicate_1_42(engine);
    }

    private final static Operation system_predicate_1_var_42(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_43);
        return system_predicate_1_43(engine);
    }

    private final static Operation system_predicate_1_var_43(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_44);
        return system_predicate_1_44(engine);
    }

    private final static Operation system_predicate_1_var_44(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_45);
        return system_predicate_1_45(engine);
    }

    private final static Operation system_predicate_1_var_45(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_46);
        return system_predicate_1_46(engine);
    }

    private final static Operation system_predicate_1_var_46(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_47);
        return system_predicate_1_47(engine);
    }

    private final static Operation system_predicate_1_var_47(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_48);
        return system_predicate_1_48(engine);
    }

    private final static Operation system_predicate_1_var_48(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_49);
        return system_predicate_1_49(engine);
    }

    private final static Operation system_predicate_1_var_49(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_50);
        return system_predicate_1_50(engine);
    }

    private final static Operation system_predicate_1_var_50(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_51);
        return system_predicate_1_51(engine);
    }

    private final static Operation system_predicate_1_var_51(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_52);
        return system_predicate_1_52(engine);
    }

    private final static Operation system_predicate_1_var_52(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_53);
        return system_predicate_1_53(engine);
    }

    private final static Operation system_predicate_1_var_53(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_54);
        return system_predicate_1_54(engine);
    }

    private final static Operation system_predicate_1_var_54(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_55);
        return system_predicate_1_55(engine);
    }

    private final static Operation system_predicate_1_var_55(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_56);
        return system_predicate_1_56(engine);
    }

    private final static Operation system_predicate_1_var_56(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_57);
        return system_predicate_1_57(engine);
    }

    private final static Operation system_predicate_1_var_57(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_58);
        return system_predicate_1_58(engine);
    }

    private final static Operation system_predicate_1_var_58(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_59);
        return system_predicate_1_59(engine);
    }

    private final static Operation system_predicate_1_var_59(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_60);
        return system_predicate_1_60(engine);
    }

    private final static Operation system_predicate_1_var_60(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_61);
        return system_predicate_1_61(engine);
    }

    private final static Operation system_predicate_1_var_61(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_62);
        return system_predicate_1_62(engine);
    }

    private final static Operation system_predicate_1_var_62(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_63);
        return system_predicate_1_63(engine);
    }

    private final static Operation system_predicate_1_var_63(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_64);
        return system_predicate_1_64(engine);
    }

    private final static Operation system_predicate_1_var_64(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_65);
        return system_predicate_1_65(engine);
    }

    private final static Operation system_predicate_1_var_65(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_66);
        return system_predicate_1_66(engine);
    }

    private final static Operation system_predicate_1_var_66(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_67);
        return system_predicate_1_67(engine);
    }

    private final static Operation system_predicate_1_var_67(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_68);
        return system_predicate_1_68(engine);
    }

    private final static Operation system_predicate_1_var_68(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_69);
        return system_predicate_1_69(engine);
    }

    private final static Operation system_predicate_1_var_69(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_70);
        return system_predicate_1_70(engine);
    }

    private final static Operation system_predicate_1_var_70(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_71);
        return system_predicate_1_71(engine);
    }

    private final static Operation system_predicate_1_var_71(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_72);
        return system_predicate_1_72(engine);
    }

    private final static Operation system_predicate_1_var_72(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_73);
        return system_predicate_1_73(engine);
    }

    private final static Operation system_predicate_1_var_73(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_74);
        return system_predicate_1_74(engine);
    }

    private final static Operation system_predicate_1_var_74(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_75);
        return system_predicate_1_75(engine);
    }

    private final static Operation system_predicate_1_var_75(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_76);
        return system_predicate_1_76(engine);
    }

    private final static Operation system_predicate_1_var_76(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_77);
        return system_predicate_1_77(engine);
    }

    private final static Operation system_predicate_1_var_77(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_78);
        return system_predicate_1_78(engine);
    }

    private final static Operation system_predicate_1_var_78(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_79);
        return system_predicate_1_79(engine);
    }

    private final static Operation system_predicate_1_var_79(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_80);
        return system_predicate_1_80(engine);
    }

    private final static Operation system_predicate_1_var_80(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_81);
        return system_predicate_1_81(engine);
    }

    private final static Operation system_predicate_1_var_81(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_82);
        return system_predicate_1_82(engine);
    }

    private final static Operation system_predicate_1_var_82(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_83);
        return system_predicate_1_83(engine);
    }

    private final static Operation system_predicate_1_var_83(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_84);
        return system_predicate_1_84(engine);
    }

    private final static Operation system_predicate_1_var_84(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_85);
        return system_predicate_1_85(engine);
    }

    private final static Operation system_predicate_1_var_85(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_86);
        return system_predicate_1_86(engine);
    }

    private final static Operation system_predicate_1_var_86(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_87);
        return system_predicate_1_87(engine);
    }

    private final static Operation system_predicate_1_var_87(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_88);
        return system_predicate_1_88(engine);
    }

    private final static Operation system_predicate_1_var_88(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_89);
        return system_predicate_1_89(engine);
    }

    private final static Operation system_predicate_1_var_89(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_90);
        return system_predicate_1_90(engine);
    }

    private final static Operation system_predicate_1_var_90(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_91);
        return system_predicate_1_91(engine);
    }

    private final static Operation system_predicate_1_var_91(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_92);
        return system_predicate_1_92(engine);
    }

    private final static Operation system_predicate_1_var_92(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_93);
        return system_predicate_1_93(engine);
    }

    private final static Operation system_predicate_1_var_93(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_94);
        return system_predicate_1_94(engine);
    }

    private final static Operation system_predicate_1_var_94(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_95);
        return system_predicate_1_95(engine);
    }

    private final static Operation system_predicate_1_var_95(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_96);
        return system_predicate_1_96(engine);
    }

    private final static Operation system_predicate_1_var_96(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_97);
        return system_predicate_1_97(engine);
    }

    private final static Operation system_predicate_1_var_97(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_98);
        return system_predicate_1_98(engine);
    }

    private final static Operation system_predicate_1_var_98(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_99);
        return system_predicate_1_99(engine);
    }

    private final static Operation system_predicate_1_var_99(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_100);
        return system_predicate_1_100(engine);
    }

    private final static Operation system_predicate_1_var_100(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_101);
        return system_predicate_1_101(engine);
    }

    private final static Operation system_predicate_1_var_101(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_102);
        return system_predicate_1_102(engine);
    }

    private final static Operation system_predicate_1_var_102(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_103);
        return system_predicate_1_103(engine);
    }

    private final static Operation system_predicate_1_var_103(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_104);
        return system_predicate_1_104(engine);
    }

    private final static Operation system_predicate_1_var_104(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_105);
        return system_predicate_1_105(engine);
    }

    private final static Operation system_predicate_1_var_105(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_106);
        return system_predicate_1_106(engine);
    }

    private final static Operation system_predicate_1_var_106(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_107);
        return system_predicate_1_107(engine);
    }

    private final static Operation system_predicate_1_var_107(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_108);
        return system_predicate_1_108(engine);
    }

    private final static Operation system_predicate_1_var_108(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_109);
        return system_predicate_1_109(engine);
    }

    private final static Operation system_predicate_1_var_109(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_110);
        return system_predicate_1_110(engine);
    }

    private final static Operation system_predicate_1_var_110(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_111);
        return system_predicate_1_111(engine);
    }

    private final static Operation system_predicate_1_var_111(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_112);
        return system_predicate_1_112(engine);
    }

    private final static Operation system_predicate_1_var_112(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_113);
        return system_predicate_1_113(engine);
    }

    private final static Operation system_predicate_1_var_113(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_114);
        return system_predicate_1_114(engine);
    }

    private final static Operation system_predicate_1_var_114(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_115);
        return system_predicate_1_115(engine);
    }

    private final static Operation system_predicate_1_var_115(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_116);
        return system_predicate_1_116(engine);
    }

    private final static Operation system_predicate_1_var_116(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_117);
        return system_predicate_1_117(engine);
    }

    private final static Operation system_predicate_1_var_117(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_118);
        return system_predicate_1_118(engine);
    }

    private final static Operation system_predicate_1_var_118(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_119);
        return system_predicate_1_119(engine);
    }

    private final static Operation system_predicate_1_var_119(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_120);
        return system_predicate_1_120(engine);
    }

    private final static Operation system_predicate_1_var_120(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_121);
        return system_predicate_1_121(engine);
    }

    private final static Operation system_predicate_1_var_121(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_122);
        return system_predicate_1_122(engine);
    }

    private final static Operation system_predicate_1_var_122(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_123);
        return system_predicate_1_123(engine);
    }

    private final static Operation system_predicate_1_var_123(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_124);
        return system_predicate_1_124(engine);
    }

    private final static Operation system_predicate_1_var_124(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_125);
        return system_predicate_1_125(engine);
    }

    private final static Operation system_predicate_1_var_125(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_126);
        return system_predicate_1_126(engine);
    }

    private final static Operation system_predicate_1_var_126(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_127);
        return system_predicate_1_127(engine);
    }

    private final static Operation system_predicate_1_var_127(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_128);
        return system_predicate_1_128(engine);
    }

    private final static Operation system_predicate_1_var_128(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_129);
        return system_predicate_1_129(engine);
    }

    private final static Operation system_predicate_1_var_129(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_130);
        return system_predicate_1_130(engine);
    }

    private final static Operation system_predicate_1_var_130(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_131);
        return system_predicate_1_131(engine);
    }

    private final static Operation system_predicate_1_var_131(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_132);
        return system_predicate_1_132(engine);
    }

    private final static Operation system_predicate_1_var_132(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_133);
        return system_predicate_1_133(engine);
    }

    private final static Operation system_predicate_1_var_133(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_134);
        return system_predicate_1_134(engine);
    }

    private final static Operation system_predicate_1_var_134(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_135);
        return system_predicate_1_135(engine);
    }

    private final static Operation system_predicate_1_var_135(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_136);
        return system_predicate_1_136(engine);
    }

    private final static Operation system_predicate_1_var_136(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_137);
        return system_predicate_1_137(engine);
    }

    private final static Operation system_predicate_1_var_137(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_138);
        return system_predicate_1_138(engine);
    }

    private final static Operation system_predicate_1_var_138(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_139);
        return system_predicate_1_139(engine);
    }

    private final static Operation system_predicate_1_var_139(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_140);
        return system_predicate_1_140(engine);
    }

    private final static Operation system_predicate_1_var_140(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_141);
        return system_predicate_1_141(engine);
    }

    private final static Operation system_predicate_1_var_141(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_142);
        return system_predicate_1_142(engine);
    }

    private final static Operation system_predicate_1_var_142(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_143);
        return system_predicate_1_143(engine);
    }

    private final static Operation system_predicate_1_var_143(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_144);
        return system_predicate_1_144(engine);
    }

    private final static Operation system_predicate_1_var_144(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_145);
        return system_predicate_1_145(engine);
    }

    private final static Operation system_predicate_1_var_145(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_146);
        return system_predicate_1_146(engine);
    }

    private final static Operation system_predicate_1_var_146(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_147);
        return system_predicate_1_147(engine);
    }

    private final static Operation system_predicate_1_var_147(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_148);
        return system_predicate_1_148(engine);
    }

    private final static Operation system_predicate_1_var_148(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_149);
        return system_predicate_1_149(engine);
    }

    private final static Operation system_predicate_1_var_149(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_150);
        return system_predicate_1_150(engine);
    }

    private final static Operation system_predicate_1_var_150(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_151);
        return system_predicate_1_151(engine);
    }

    private final static Operation system_predicate_1_var_151(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_152);
        return system_predicate_1_152(engine);
    }

    private final static Operation system_predicate_1_var_152(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_153);
        return system_predicate_1_153(engine);
    }

    private final static Operation system_predicate_1_var_153(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_154);
        return system_predicate_1_154(engine);
    }

    private final static Operation system_predicate_1_var_154(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_155);
        return system_predicate_1_155(engine);
    }

    private final static Operation system_predicate_1_var_155(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_156);
        return system_predicate_1_156(engine);
    }

    private final static Operation system_predicate_1_var_156(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_157);
        return system_predicate_1_157(engine);
    }

    private final static Operation system_predicate_1_var_157(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_158);
        return system_predicate_1_158(engine);
    }

    private final static Operation system_predicate_1_var_158(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_159);
        return system_predicate_1_159(engine);
    }

    private final static Operation system_predicate_1_var_159(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_160);
        return system_predicate_1_160(engine);
    }

    private final static Operation system_predicate_1_var_160(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_161);
        return system_predicate_1_161(engine);
    }

    private final static Operation system_predicate_1_var_161(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_162);
        return system_predicate_1_162(engine);
    }

    private final static Operation system_predicate_1_var_162(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_163);
        return system_predicate_1_163(engine);
    }

    private final static Operation system_predicate_1_var_163(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_164);
        return system_predicate_1_164(engine);
    }

    private final static Operation system_predicate_1_var_164(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_165);
        return system_predicate_1_165(engine);
    }

    private final static Operation system_predicate_1_var_165(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_166);
        return system_predicate_1_166(engine);
    }

    private final static Operation system_predicate_1_var_166(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_167);
        return system_predicate_1_167(engine);
    }

    private final static Operation system_predicate_1_var_167(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_168);
        return system_predicate_1_168(engine);
    }

    private final static Operation system_predicate_1_var_168(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_169);
        return system_predicate_1_169(engine);
    }

    private final static Operation system_predicate_1_var_169(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_170);
        return system_predicate_1_170(engine);
    }

    private final static Operation system_predicate_1_var_170(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_171);
        return system_predicate_1_171(engine);
    }

    private final static Operation system_predicate_1_var_171(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_172);
        return system_predicate_1_172(engine);
    }

    private final static Operation system_predicate_1_var_172(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_173);
        return system_predicate_1_173(engine);
    }

    private final static Operation system_predicate_1_var_173(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_174);
        return system_predicate_1_174(engine);
    }

    private final static Operation system_predicate_1_var_174(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_175);
        return system_predicate_1_175(engine);
    }

    private final static Operation system_predicate_1_var_175(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_176);
        return system_predicate_1_176(engine);
    }

    private final static Operation system_predicate_1_var_176(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_177);
        return system_predicate_1_177(engine);
    }

    private final static Operation system_predicate_1_var_177(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_178);
        return system_predicate_1_178(engine);
    }

    private final static Operation system_predicate_1_var_178(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_179);
        return system_predicate_1_179(engine);
    }

    private final static Operation system_predicate_1_var_179(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_180);
        return system_predicate_1_180(engine);
    }

    private final static Operation system_predicate_1_var_180(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_181);
        return system_predicate_1_181(engine);
    }

    private final static Operation system_predicate_1_var_181(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_182);
        return system_predicate_1_182(engine);
    }

    private final static Operation system_predicate_1_var_182(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_183);
        return system_predicate_1_183(engine);
    }

    private final static Operation system_predicate_1_var_183(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_184);
        return system_predicate_1_184(engine);
    }

    private final static Operation system_predicate_1_var_184(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_185);
        return system_predicate_1_185(engine);
    }

    private final static Operation system_predicate_1_var_185(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_186);
        return system_predicate_1_186(engine);
    }

    private final static Operation system_predicate_1_var_186(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_187);
        return system_predicate_1_187(engine);
    }

    private final static Operation system_predicate_1_var_187(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_188);
        return system_predicate_1_188(engine);
    }

    private final static Operation system_predicate_1_var_188(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_189);
        return system_predicate_1_189(engine);
    }

    private final static Operation system_predicate_1_var_189(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_190);
        return system_predicate_1_190(engine);
    }

    private final static Operation system_predicate_1_var_190(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_191);
        return system_predicate_1_191(engine);
    }

    private final static Operation system_predicate_1_var_191(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_192);
        return system_predicate_1_192(engine);
    }

    private final static Operation system_predicate_1_var_192(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_193);
        return system_predicate_1_193(engine);
    }

    private final static Operation system_predicate_1_var_193(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_194);
        return system_predicate_1_194(engine);
    }

    private final static Operation system_predicate_1_var_194(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_195);
        return system_predicate_1_195(engine);
    }

    private final static Operation system_predicate_1_var_195(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_196);
        return system_predicate_1_196(engine);
    }

    private final static Operation system_predicate_1_var_196(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_197);
        return system_predicate_1_197(engine);
    }

    private final static Operation system_predicate_1_var_197(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_198);
        return system_predicate_1_198(engine);
    }

    private final static Operation system_predicate_1_var_198(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_199);
        return system_predicate_1_199(engine);
    }

    private final static Operation system_predicate_1_var_199(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_200);
        return system_predicate_1_200(engine);
    }

    private final static Operation system_predicate_1_var_200(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_201);
        return system_predicate_1_201(engine);
    }

    private final static Operation system_predicate_1_var_201(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_202);
        return system_predicate_1_202(engine);
    }

    private final static Operation system_predicate_1_var_202(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_203);
        return system_predicate_1_203(engine);
    }

    private final static Operation system_predicate_1_var_203(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_204);
        return system_predicate_1_204(engine);
    }

    private final static Operation system_predicate_1_var_204(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_205);
        return system_predicate_1_205(engine);
    }

    private final static Operation system_predicate_1_var_205(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_206);
        return system_predicate_1_206(engine);
    }

    private final static Operation system_predicate_1_var_206(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_207);
        return system_predicate_1_207(engine);
    }

    private final static Operation system_predicate_1_var_207(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_208);
        return system_predicate_1_208(engine);
    }

    private final static Operation system_predicate_1_var_208(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_209);
        return system_predicate_1_209(engine);
    }

    private final static Operation system_predicate_1_var_209(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_210);
        return system_predicate_1_210(engine);
    }

    private final static Operation system_predicate_1_var_210(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_211);
        return system_predicate_1_211(engine);
    }

    private final static Operation system_predicate_1_var_211(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_212);
        return system_predicate_1_212(engine);
    }

    private final static Operation system_predicate_1_var_212(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_213);
        return system_predicate_1_213(engine);
    }

    private final static Operation system_predicate_1_var_213(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_214);
        return system_predicate_1_214(engine);
    }

    private final static Operation system_predicate_1_var_214(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_215);
        return system_predicate_1_215(engine);
    }

    private final static Operation system_predicate_1_var_215(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_216);
        return system_predicate_1_216(engine);
    }

    private final static Operation system_predicate_1_var_216(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_217);
        return system_predicate_1_217(engine);
    }

    private final static Operation system_predicate_1_var_217(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_218);
        return system_predicate_1_218(engine);
    }

    private final static Operation system_predicate_1_var_218(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_219);
        return system_predicate_1_219(engine);
    }

    private final static Operation system_predicate_1_var_219(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_220);
        return system_predicate_1_220(engine);
    }

    private final static Operation system_predicate_1_var_220(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_221);
        return system_predicate_1_221(engine);
    }

    private final static Operation system_predicate_1_var_221(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_222);
        return system_predicate_1_222(engine);
    }

    private final static Operation system_predicate_1_var_222(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_223);
        return system_predicate_1_223(engine);
    }

    private final static Operation system_predicate_1_var_223(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_224);
        return system_predicate_1_224(engine);
    }

    private final static Operation system_predicate_1_var_224(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_225);
        return system_predicate_1_225(engine);
    }

    private final static Operation system_predicate_1_var_225(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_226);
        return system_predicate_1_226(engine);
    }

    private final static Operation system_predicate_1_var_226(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_227);
        return system_predicate_1_227(engine);
    }

    private final static Operation system_predicate_1_var_227(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_228);
        return system_predicate_1_228(engine);
    }

    private final static Operation system_predicate_1_var_228(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_229);
        return system_predicate_1_229(engine);
    }

    private final static Operation system_predicate_1_var_229(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_230);
        return system_predicate_1_230(engine);
    }

    private final static Operation system_predicate_1_var_230(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_231);
        return system_predicate_1_231(engine);
    }

    private final static Operation system_predicate_1_var_231(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_232);
        return system_predicate_1_232(engine);
    }

    private final static Operation system_predicate_1_var_232(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_233);
        return system_predicate_1_233(engine);
    }

    private final static Operation system_predicate_1_var_233(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_234);
        return system_predicate_1_234(engine);
    }

    private final static Operation system_predicate_1_var_234(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_235);
        return system_predicate_1_235(engine);
    }

    private final static Operation system_predicate_1_var_235(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_236);
        return system_predicate_1_236(engine);
    }

    private final static Operation system_predicate_1_var_236(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_237);
        return system_predicate_1_237(engine);
    }

    private final static Operation system_predicate_1_var_237(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_238);
        return system_predicate_1_238(engine);
    }

    private final static Operation system_predicate_1_var_238(Prolog engine) {
        engine.retry(null, PRED_system_predicate_1::system_predicate_1_var_239);
        return system_predicate_1_239(engine);
    }

    private final static Operation system_predicate_1_var_239(Prolog engine) {
        engine.trust(null);
        return system_predicate_1_240(engine);
    }

    private final static Operation system_predicate_1_con(Prolog engine) {
        return engine.switch_on_hash(con, fail_0).exec(engine);
    }

    private final static Operation system_predicate_1_str(Prolog engine) {
        return engine.switch_on_hash(str, fail_0).exec(engine);
    }

    private final static Operation system_predicate_1_1(Prolog engine) {
    // system_predicate(system_predicate(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(system_predicate(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("system_predicate", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_2(Prolog engine) {
    // system_predicate(true):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(true):-[]
        if (! s2.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_3(Prolog engine) {
    // system_predicate(therwise):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(therwise):-[]
        if (! s3.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_4(Prolog engine) {
    // system_predicate(fail):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(fail):-[]
        if (! s4.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_5(Prolog engine) {
    // system_predicate(false):-true
    // system_predicate(false):-[]
        if (! s5.unify(engine.AREGS[0], engine.trail))
            return engine.fail();
        return engine.cont;
    }

    private final static Operation system_predicate_1_6(Prolog engine) {
    // system_predicate(!):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(!):-[]
        if (! s6.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_7(Prolog engine) {
    // system_predicate('$get_level'(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$get_level'(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$get_level", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_8(Prolog engine) {
    // system_predicate('$neck_cut'):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$neck_cut'):-[]
        if (! s8.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_9(Prolog engine) {
    // system_predicate('$cut'(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$cut'(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$cut", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_10(Prolog engine) {
    // system_predicate(A^B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A^B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("^", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_11(Prolog engine) {
    // system_predicate((A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate((A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C(",", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_12(Prolog engine) {
    // system_predicate((A;B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate((A;B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C(";", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_13(Prolog engine) {
    // system_predicate((A->B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate((A->B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("->", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_14(Prolog engine) {
    // system_predicate(call(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(call(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("call", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_15(Prolog engine) {
    // system_predicate(catch(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(catch(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("catch", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_16(Prolog engine) {
    // system_predicate(throw(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(throw(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("throw", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_17(Prolog engine) {
    // system_predicate(on_exception(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(on_exception(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("on_exception", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_18(Prolog engine) {
    // system_predicate(raise_exception(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(raise_exception(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("raise_exception", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_19(Prolog engine) {
    // system_predicate(A=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_20(Prolog engine) {
    // system_predicate('$unify'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$unify'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$unify", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_21(Prolog engine) {
    // system_predicate(A\=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A\=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("\\=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_22(Prolog engine) {
    // system_predicate('$not_unifiable'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$not_unifiable'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$not_unifiable", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_23(Prolog engine) {
    // system_predicate(var(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(var(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("var", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_24(Prolog engine) {
    // system_predicate(atom(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atom(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atom", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_25(Prolog engine) {
    // system_predicate(integer(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(integer(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("integer", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_26(Prolog engine) {
    // system_predicate(long(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(long(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("long", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_27(Prolog engine) {
    // system_predicate(float(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(float(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("float", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_28(Prolog engine) {
    // system_predicate(atomic(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atomic(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atomic", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_29(Prolog engine) {
    // system_predicate(compound(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(compound(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("compound", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_30(Prolog engine) {
    // system_predicate(nonvar(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nonvar(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("nonvar", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_31(Prolog engine) {
    // system_predicate(number(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(number(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("number", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_32(Prolog engine) {
    // system_predicate(java(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_33(Prolog engine) {
    // system_predicate(java(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_34(Prolog engine) {
    // system_predicate(closure(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(closure(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("closure", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_35(Prolog engine) {
    // system_predicate(ground(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(ground(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("ground", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_36(Prolog engine) {
    // system_predicate(callable(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(callable(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("callable", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_37(Prolog engine) {
    // system_predicate(A==B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A==B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("==", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_38(Prolog engine) {
    // system_predicate('$equality_of_term'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$equality_of_term'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$equality_of_term", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_39(Prolog engine) {
    // system_predicate(A\==B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A\==B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("\\==", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_40(Prolog engine) {
    // system_predicate('$inequality_of_term'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$inequality_of_term'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$inequality_of_term", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_41(Prolog engine) {
    // system_predicate(A@<B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A@<B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("@<", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_42(Prolog engine) {
    // system_predicate('$before'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$before'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$before", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_43(Prolog engine) {
    // system_predicate(A@>B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A@>B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("@>", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_44(Prolog engine) {
    // system_predicate('$after'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$after'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$after", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_45(Prolog engine) {
    // system_predicate(A@=<B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A@=<B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("@=<", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_46(Prolog engine) {
    // system_predicate('$not_after'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$not_after'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$not_after", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_47(Prolog engine) {
    // system_predicate(A@>=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A@>=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("@>=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_48(Prolog engine) {
    // system_predicate('$not_before'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$not_before'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$not_before", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_49(Prolog engine) {
    // system_predicate(?=(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(?=(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("?=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_50(Prolog engine) {
    // system_predicate('$identical_or_cannot_unify'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$identical_or_cannot_unify'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$identical_or_cannot_unify", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_51(Prolog engine) {
    // system_predicate(compare(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(compare(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("compare", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_52(Prolog engine) {
    // system_predicate(sort(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(sort(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("sort", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_53(Prolog engine) {
    // system_predicate(keysort(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(keysort(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("keysort", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_54(Prolog engine) {
    // system_predicate(arg(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(arg(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("arg", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_55(Prolog engine) {
    // system_predicate(functor(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(functor(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("functor", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_56(Prolog engine) {
    // system_predicate(A=..B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A=..B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("=..", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_57(Prolog engine) {
    // system_predicate('$univ'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$univ'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$univ", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_58(Prolog engine) {
    // system_predicate(copy_term(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(copy_term(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("copy_term", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_59(Prolog engine) {
    // system_predicate(A is B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A is B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("is", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_60(Prolog engine) {
    // system_predicate('$abs'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$abs'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$abs", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_61(Prolog engine) {
    // system_predicate('$asin'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$asin'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$asin", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_62(Prolog engine) {
    // system_predicate('$acos'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$acos'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$acos", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_63(Prolog engine) {
    // system_predicate('$atan'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$atan'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$atan", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_64(Prolog engine) {
    // system_predicate('$bitwise_conj'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$bitwise_conj'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$bitwise_conj", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_65(Prolog engine) {
    // system_predicate('$bitwise_disj'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$bitwise_disj'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$bitwise_disj", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_66(Prolog engine) {
    // system_predicate('$bitwise_exclusive_or'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$bitwise_exclusive_or'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$bitwise_exclusive_or", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_67(Prolog engine) {
    // system_predicate('$bitwise_neg'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$bitwise_neg'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$bitwise_neg", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_68(Prolog engine) {
    // system_predicate('$ceil'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$ceil'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$ceil", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_69(Prolog engine) {
    // system_predicate('$cos'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$cos'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$cos", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_70(Prolog engine) {
    // system_predicate('$degrees'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$degrees'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$degrees", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_71(Prolog engine) {
    // system_predicate('$exp'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$exp'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$exp", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_72(Prolog engine) {
    // system_predicate('$float'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$float'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$float", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_73(Prolog engine) {
    // system_predicate('$float_integer_part'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$float_integer_part'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$float_integer_part", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_74(Prolog engine) {
    // system_predicate('$float_fractional_part'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$float_fractional_part'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$float_fractional_part", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_75(Prolog engine) {
    // system_predicate('$float_quotient'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$float_quotient'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$float_quotient", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_76(Prolog engine) {
    // system_predicate('$floor'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$floor'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$floor", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_77(Prolog engine) {
    // system_predicate('$int_quotient'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$int_quotient'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$int_quotient", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_78(Prolog engine) {
    // system_predicate('$log'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$log'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$log", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_79(Prolog engine) {
    // system_predicate('$max'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$max'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$max", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_80(Prolog engine) {
    // system_predicate('$min'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$min'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$min", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_81(Prolog engine) {
    // system_predicate('$minus'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$minus'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$minus", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_82(Prolog engine) {
    // system_predicate('$mod'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$mod'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$mod", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_83(Prolog engine) {
    // system_predicate('$multi'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$multi'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$multi", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_84(Prolog engine) {
    // system_predicate('$plus'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$plus'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$plus", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_85(Prolog engine) {
    // system_predicate('$pow'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$pow'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$pow", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_86(Prolog engine) {
    // system_predicate('$radians'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$radians'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$radians", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_87(Prolog engine) {
    // system_predicate('$rint'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$rint'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$rint", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_88(Prolog engine) {
    // system_predicate('$round'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$round'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$round", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_89(Prolog engine) {
    // system_predicate('$shift_left'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$shift_left'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$shift_left", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_90(Prolog engine) {
    // system_predicate('$shift_right'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$shift_right'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$shift_right", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_91(Prolog engine) {
    // system_predicate('$sign'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$sign'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$sign", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_92(Prolog engine) {
    // system_predicate('$sin'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$sin'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$sin", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_93(Prolog engine) {
    // system_predicate('$sqrt'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$sqrt'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$sqrt", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_94(Prolog engine) {
    // system_predicate('$tan'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$tan'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$tan", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_95(Prolog engine) {
    // system_predicate('$truncate'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$truncate'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$truncate", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_96(Prolog engine) {
    // system_predicate(A=:=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A=:=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("=:=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_97(Prolog engine) {
    // system_predicate('$arith_equal'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$arith_equal'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$arith_equal", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_98(Prolog engine) {
    // system_predicate(A=\=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A=\=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("=\\=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_99(Prolog engine) {
    // system_predicate('$arith_not_equal'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$arith_not_equal'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$arith_not_equal", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_100(Prolog engine) {
    // system_predicate(A<B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A<B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("<", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_101(Prolog engine) {
    // system_predicate('$less_than'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$less_than'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$less_than", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_102(Prolog engine) {
    // system_predicate(A=<B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A=<B):-[]
        a1 = a1.dref();
            if (!a1.unify(C("=<", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_103(Prolog engine) {
    // system_predicate('$less_or_equal'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$less_or_equal'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$less_or_equal", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_104(Prolog engine) {
    // system_predicate(A>B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A>B):-[]
        a1 = a1.dref();
            if (!a1.unify(C(">", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_105(Prolog engine) {
    // system_predicate('$greater_than'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$greater_than'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$greater_than", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_106(Prolog engine) {
    // system_predicate(A>=B):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(A>=B):-[]
        a1 = a1.dref();
            if (!a1.unify(C(">=", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_107(Prolog engine) {
    // system_predicate('$greater_or_equal'(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$greater_or_equal'(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$greater_or_equal", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_108(Prolog engine) {
    // system_predicate(clause(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(clause(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("clause", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_109(Prolog engine) {
    // system_predicate(initialization(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(initialization(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("initialization", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_110(Prolog engine) {
    // system_predicate('$new_indexing_hash'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$new_indexing_hash'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$new_indexing_hash", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_111(Prolog engine) {
    // system_predicate(assert(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(assert(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("assert", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_112(Prolog engine) {
    // system_predicate(assertz(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(assertz(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("assertz", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_113(Prolog engine) {
    // system_predicate(asserta(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(asserta(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("asserta", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_114(Prolog engine) {
    // system_predicate(retract(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(retract(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("retract", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_115(Prolog engine) {
    // system_predicate(abolish(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(abolish(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("abolish", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_116(Prolog engine) {
    // system_predicate(retractall(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(retractall(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("retractall", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_117(Prolog engine) {
    // system_predicate(findall(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(findall(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("findall", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_118(Prolog engine) {
    // system_predicate(bagof(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(bagof(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("bagof", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_119(Prolog engine) {
    // system_predicate(setof(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(setof(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("setof", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_120(Prolog engine) {
    // system_predicate(current_input(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(current_input(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("current_input", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_121(Prolog engine) {
    // system_predicate(current_output(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(current_output(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("current_output", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_122(Prolog engine) {
    // system_predicate(set_input(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(set_input(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("set_input", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_123(Prolog engine) {
    // system_predicate(set_output(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(set_output(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("set_output", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_124(Prolog engine) {
    // system_predicate(open(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(open(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("open", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_125(Prolog engine) {
    // system_predicate(open(A,B,C,D)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(open(A,B,C,D)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("open", V(engine), V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_126(Prolog engine) {
    // system_predicate(close(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(close(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("close", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_127(Prolog engine) {
    // system_predicate(close(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(close(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("close", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_128(Prolog engine) {
    // system_predicate(flush_output(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(flush_output(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("flush_output", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_129(Prolog engine) {
    // system_predicate(flush_output):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(flush_output):-[]
        if (! s129.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_130(Prolog engine) {
    // system_predicate(stream_property(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(stream_property(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("stream_property", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_131(Prolog engine) {
    // system_predicate(get_char(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_char(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_char", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_132(Prolog engine) {
    // system_predicate(get_char(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_char(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_char", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_133(Prolog engine) {
    // system_predicate(get_code(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_code(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_code", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_134(Prolog engine) {
    // system_predicate(get_code(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_code(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_code", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_135(Prolog engine) {
    // system_predicate(peek_char(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_char(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_char", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_136(Prolog engine) {
    // system_predicate(peek_char(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_char(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_char", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_137(Prolog engine) {
    // system_predicate(peek_code(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_code(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_code", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_138(Prolog engine) {
    // system_predicate(peek_code(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_code(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_code", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_139(Prolog engine) {
    // system_predicate(put_char(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_char(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_char", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_140(Prolog engine) {
    // system_predicate(put_char(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_char(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_char", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_141(Prolog engine) {
    // system_predicate(put_code(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_code(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_code", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_142(Prolog engine) {
    // system_predicate(put_code(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_code(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_code", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_143(Prolog engine) {
    // system_predicate(nl):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nl):-[]
        if (! s143.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_144(Prolog engine) {
    // system_predicate(nl(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nl(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("nl", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_145(Prolog engine) {
    // system_predicate(get0(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get0(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get0", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_146(Prolog engine) {
    // system_predicate(get0(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get0(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get0", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_147(Prolog engine) {
    // system_predicate(get(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_148(Prolog engine) {
    // system_predicate(get(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_149(Prolog engine) {
    // system_predicate(put(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_150(Prolog engine) {
    // system_predicate(put(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_151(Prolog engine) {
    // system_predicate(tab(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(tab(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("tab", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_152(Prolog engine) {
    // system_predicate(tab(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(tab(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("tab", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_153(Prolog engine) {
    // system_predicate(skip(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(skip(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("skip", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_154(Prolog engine) {
    // system_predicate(skip(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(skip(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("skip", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_155(Prolog engine) {
    // system_predicate(get_byte(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_byte(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_byte", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_156(Prolog engine) {
    // system_predicate(get_byte(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(get_byte(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("get_byte", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_157(Prolog engine) {
    // system_predicate(peek_byte(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_byte(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_byte", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_158(Prolog engine) {
    // system_predicate(peek_byte(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(peek_byte(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("peek_byte", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_159(Prolog engine) {
    // system_predicate(put_byte(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_byte(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_byte", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_160(Prolog engine) {
    // system_predicate(put_byte(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(put_byte(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("put_byte", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_161(Prolog engine) {
    // system_predicate(read(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_162(Prolog engine) {
    // system_predicate(read(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_163(Prolog engine) {
    // system_predicate(read_with_variables(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read_with_variables(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read_with_variables", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_164(Prolog engine) {
    // system_predicate(read_with_variables(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read_with_variables(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read_with_variables", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_165(Prolog engine) {
    // system_predicate(read_line(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read_line(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read_line", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_166(Prolog engine) {
    // system_predicate(read_line(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(read_line(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("read_line", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_167(Prolog engine) {
    // system_predicate(write(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_168(Prolog engine) {
    // system_predicate(write(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_169(Prolog engine) {
    // system_predicate(writeq(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(writeq(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("writeq", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_170(Prolog engine) {
    // system_predicate(writeq(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(writeq(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("writeq", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_171(Prolog engine) {
    // system_predicate(write_canonical(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write_canonical(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write_canonical", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_172(Prolog engine) {
    // system_predicate(write_canonical(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write_canonical(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write_canonical", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_173(Prolog engine) {
    // system_predicate(write_term(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write_term(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write_term", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_174(Prolog engine) {
    // system_predicate(write_term(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(write_term(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("write_term", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_175(Prolog engine) {
    // system_predicate(op(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(op(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("op", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_176(Prolog engine) {
    // system_predicate(current_op(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(current_op(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("current_op", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_177(Prolog engine) {
    // system_predicate(\+A):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(\+A):-[]
        a1 = a1.dref();
            if (!a1.unify(C("\\+", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_178(Prolog engine) {
    // system_predicate(once(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(once(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("once", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_179(Prolog engine) {
    // system_predicate(repeat):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(repeat):-[]
        if (! s179.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_180(Prolog engine) {
    // system_predicate(atom_length(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atom_length(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atom_length", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_181(Prolog engine) {
    // system_predicate(atom_concat(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atom_concat(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atom_concat", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_182(Prolog engine) {
    // system_predicate(sub_atom(A,B,C,D,E)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(sub_atom(A,B,C,D,E)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("sub_atom", V(engine), V(engine), V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_183(Prolog engine) {
    // system_predicate(atom_chars(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atom_chars(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atom_chars", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_184(Prolog engine) {
    // system_predicate(atom_codes(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(atom_codes(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("atom_codes", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_185(Prolog engine) {
    // system_predicate(char_code(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(char_code(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("char_code", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_186(Prolog engine) {
    // system_predicate(number_chars(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(number_chars(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("number_chars", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_187(Prolog engine) {
    // system_predicate(number_codes(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(number_codes(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("number_codes", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_188(Prolog engine) {
    // system_predicate(name(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(name(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("name", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_189(Prolog engine) {
    // system_predicate(set_prolog_flag(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(set_prolog_flag(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("set_prolog_flag", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_190(Prolog engine) {
    // system_predicate(current_prolog_flag(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(current_prolog_flag(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("current_prolog_flag", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_191(Prolog engine) {
    // system_predicate(halt):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(halt):-[]
        if (! s191.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_192(Prolog engine) {
    // system_predicate(halt(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(halt(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("halt", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_193(Prolog engine) {
    // system_predicate(abort):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(abort):-[]
        if (! s193.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_194(Prolog engine) {
    // system_predicate('C'(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('C'(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("C", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_195(Prolog engine) {
    // system_predicate(expand_term(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(expand_term(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("expand_term", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_196(Prolog engine) {
    // system_predicate(new_hash(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(new_hash(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("new_hash", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_197(Prolog engine) {
    // system_predicate(new_hash(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(new_hash(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("new_hash", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_198(Prolog engine) {
    // system_predicate(hash_clear(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_clear(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_clear", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_199(Prolog engine) {
    // system_predicate(hash_contains_key(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_contains_key(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_contains_key", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_200(Prolog engine) {
    // system_predicate(hash_get(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_get(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_get", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_201(Prolog engine) {
    // system_predicate(hash_is_empty(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_is_empty(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_is_empty", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_202(Prolog engine) {
    // system_predicate(hash_keys(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_keys(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_keys", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_203(Prolog engine) {
    // system_predicate(hash_map(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_map(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_map", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_204(Prolog engine) {
    // system_predicate(hash_put(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_put(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_put", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_205(Prolog engine) {
    // system_predicate(hash_remove(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_remove(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_remove", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_206(Prolog engine) {
    // system_predicate(hash_size(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(hash_size(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("hash_size", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_207(Prolog engine) {
    // system_predicate('$get_hash_manager'(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate('$get_hash_manager'(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("$get_hash_manager", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_208(Prolog engine) {
    // system_predicate(java_constructor0(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_constructor0(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_constructor0", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_209(Prolog engine) {
    // system_predicate(java_constructor(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_constructor(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_constructor", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_210(Prolog engine) {
    // system_predicate(java_declared_constructor0(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_declared_constructor0(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_declared_constructor0", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_211(Prolog engine) {
    // system_predicate(java_declared_constructor(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_declared_constructor(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_declared_constructor", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_212(Prolog engine) {
    // system_predicate(java_method0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_method0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_method0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_213(Prolog engine) {
    // system_predicate(java_method(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_method(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_method", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_214(Prolog engine) {
    // system_predicate(java_declared_method0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_declared_method0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_declared_method0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_215(Prolog engine) {
    // system_predicate(java_declared_method(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_declared_method(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_declared_method", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_216(Prolog engine) {
    // system_predicate(java_get_field0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_get_field0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_get_field0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_217(Prolog engine) {
    // system_predicate(java_get_field(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_get_field(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_get_field", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_218(Prolog engine) {
    // system_predicate(java_get_declared_field0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_get_declared_field0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_get_declared_field0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_219(Prolog engine) {
    // system_predicate(java_get_declared_field(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_get_declared_field(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_get_declared_field", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_220(Prolog engine) {
    // system_predicate(java_set_field0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_set_field0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_set_field0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_221(Prolog engine) {
    // system_predicate(java_set_field(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_set_field(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_set_field", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_222(Prolog engine) {
    // system_predicate(java_set_declared_field0(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_set_declared_field0(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_set_declared_field0", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_223(Prolog engine) {
    // system_predicate(java_set_declared_field(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_set_declared_field(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_set_declared_field", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_224(Prolog engine) {
    // system_predicate(synchronized(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(synchronized(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("synchronized", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_225(Prolog engine) {
    // system_predicate(java_conversion(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(java_conversion(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("java_conversion", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_226(Prolog engine) {
    // system_predicate(cafeteria):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(cafeteria):-[]
        if (! s226.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_227(Prolog engine) {
    // system_predicate(consult(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(consult(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("consult", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_228(Prolog engine) {
    // system_predicate(trace):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(trace):-[]
        if (! s228.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_229(Prolog engine) {
    // system_predicate(notrace):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(notrace):-[]
        if (! s229.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_230(Prolog engine) {
    // system_predicate(debug):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(debug):-[]
        if (! s230.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_231(Prolog engine) {
    // system_predicate(nodebug):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nodebug):-[]
        if (! s231.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_232(Prolog engine) {
    // system_predicate(leash(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(leash(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("leash", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_233(Prolog engine) {
    // system_predicate(spy(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(spy(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("spy", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_234(Prolog engine) {
    // system_predicate(nospy(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nospy(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("nospy", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_235(Prolog engine) {
    // system_predicate(nospyall):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(nospyall):-[]
        if (! s235.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_236(Prolog engine) {
    // system_predicate(listing):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(listing):-[]
        if (! s236.unify(a1, engine.trail))
            return engine.fail();
        return cont;
    }

    private final static Operation system_predicate_1_237(Prolog engine) {
    // system_predicate(listing(A)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(listing(A)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("listing", V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_238(Prolog engine) {
    // system_predicate(length(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(length(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("length", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_239(Prolog engine) {
    // system_predicate(numbervars(A,B,C)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(numbervars(A,B,C)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("numbervars", V(engine), V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }

    private final static Operation system_predicate_1_240(Prolog engine) {
    // system_predicate(statistics(A,B)):-true
        Term a1;
        Operation cont;
        a1 = engine.AREGS[0];
        cont = engine.cont;
    // system_predicate(statistics(A,B)):-[]
        a1 = a1.dref();
            if (!a1.unify(C("statistics", V(engine), V(engine)), engine.trail)){
                return engine.fail();
            }
        return cont;
    }
}
