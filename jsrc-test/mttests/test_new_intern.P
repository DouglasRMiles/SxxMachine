:- import trie_shas_insert/2,trie_shas_unify/2,
	  trie_shas_delete/2 from intern.
:- import trie_insert/2,trie_unify/2,trie_delete/2 from intern. 
:- import trie_bulk_unify/3, trie_bulk_insert/2, trie_bulk_delete/2 from intern.

:- import trie_create/2, trie_truncate/1 from intern.

test:- test0_shas,test1_shas,test3,test4,test5,test6,test7,
	test1_gen,test2_gen, test_bulk.

test0_shas:- 
	trie_create(Rp,[type(shas)]),
	trie_shas_insert(Rp,pair(a,1)),
	trie_shas_insert(Rp,pair(b,2)),
	test0_1_shas(Rp).

test0_1_shas(Rp):- 
	trie_shas_unify(Rp,pair(a,X)),
	writeln(first(0,X)),
	trie_shas_unify(Rp,pair(b,Y)),
	writeln(second(0,Y)).

%------
% test with writing & reading: multiple threads.

test1_shas:- 
	trie_create(Rp,[type(shas)]),
	trie_shas_insert(Rp,pair(a,1)),
	trie_shas_insert(Rp,pair(b,2)),
	thread_create(test1_1_shas(Rp),Id),
	thread_join(Id).

test1_1_shas(Rp):- 
	trie_shas_unify(Rp,pair(a,X)),
	writeln(first(1,X)),
	trie_shas_unify(Rp,pair(b,Y)),
	writeln(second(1,Y)).

%------
% test with deleting
test3:- 
	trie_create(Rp,[type(shas)]),
%	writeln(Rp),
	trie_shas_insert(Rp,pair(a,1)),
	trie_shas_insert(Rp,pair(b,2)),
	thread_create(test3_1(Rp),Id),
	thread_join(Id,_Status), %writeln(id(Id,Status)),
	trie_shas_unify(Rp,pair(a,X)),
	writeln(parent_first(3,X)),
	trie_shas_unify(Rp,pair(b,Y)),
	writeln(parent_second(3,Y)).
test3.

test3_1(Rp):- 
	trie_shas_unify(Rp,pair(a,X)),
	writeln(child_first(3,X)),
	trie_shas_unify(Rp,pair(b,Y)),
	writeln(child_second(3,Y)),
	trie_shas_delete(Rp,pair(b,2)).

%------
% test of trie_truncate
test4:- 
	trie_create(Rp,[type(shas)]),
%	writeln(Rp),
	trie_shas_insert(Rp,pair(a,1)),
	trie_shas_insert(Rp,pair(b,2)),
	thread_create(test4_1(Rp),Id),
	thread_join(Id,_Status), %writeln(id(Id,Status)),
	trie_shas_unify(Rp,pair(a,X)),
	writeln(parent_first(X)),
	trie_shas_unify(Rp,pair(b,Y)),
	writeln(parent_second(Y)).
test4:- writeln(test4_finished).

test4_1(Rp):- 
 trie_truncate(Rp).

%------

test5:- 
	trie_create(Rp,[type(shas)]),
%	writeln(Rp),
	thread_create(insert_every_other(50000,Rp),EId),
	thread_create(insert_every_other(49999,Rp),OId),
	thread_join(EId,_ES), %writeln(id(EId,ES)),
	thread_join(OId,_OS), %writeln(id(OId,OS)),
	check_shared_trie(50000,Rp),
	writeln(test5_checks_ok).

%------

test6:- 
	trie_create(Rp,[type(shas)]),
%	writeln(Rp),
	insert_every_other(50000,Rp),
	insert_every_other(49999,Rp),
	thread_create(check_shared_trie(50000,Rp),Id1),
	thread_create(check_shared_trie(50000,Rp),Id2),
	thread_join(Id1,_S1), %writeln(id(Id1,S1)),
	thread_join(Id2,_S2), %writeln(id(Id2,S2)),
	writeln(test6_checks_ok).

%------

test7:- 
	trie_create(Rp,[type(shas)]),
%	writeln(Rp),
	insert_every_other(50000,Rp),
	insert_every_other(49999,Rp),
	thread_create(delete_every_other(50000,Rp),Id1),
	thread_create(delete_every_other(49999,Rp),Id2),
	thread_join(Id1,_S1), %writeln(id(Id1,S1)),
	thread_join(Id2,_S2), %writeln(id(Id2,S2)),
	writeln(test7_checks_ok).

test1_gen:- 
	trie_create(Rp,[type(shas)]),
	trie_insert(Rp,pair(a,1)),
	trie_insert(Rp,pair(b,2)),
	trie_delete(Rp,pair(b,2)),
	trie_unify(Rp,pair(a,X)),
	writeln(first(gen,1,X)),
	trie_unify(Rp,pair(b,Y)),
	writeln(second(gen,1,Y)).
test1_gen.

test2_gen:- 
	trie_create(_Rp,[type(shas),alias(foo)]),
	trie_insert(foo,pair(a,1)),
	trie_insert(foo,pair(b,2)),
	trie_delete(foo,pair(b,2)),
	trie_unify(foo,pair(a,X)),
	writeln(first(gen,2,X)),
	trie_unify(foo,pair(b,Y)),
	writeln(second(gen,2,Y)).
test2_gen.

test_bulk:- 
   trie_create(_Tid,[type(shas),alias(foo_bulk)]),
   trie_bulk_insert(foo_bulk,tbu(_)),
   trie_bulk_unify(foo_bulk,_X,Y1),
   writeln(bulk_first(Y1)),
   trie_bulk_delete(foo_bulk,pair(word(_),_)),
   trie_bulk_unify(foo_bulk,_X,Y2),
   writeln(bulk_second(Y2)).

tbu(pair(sentence(1),[a,dog,walks])).
tbu(pair(sentence(2),[a,man,snores])).
tbu(pair(word(1),man)).
tbu(pair(sentence(3),[a,man,sleeps])).
tbu(pair(word(2),dog)).
tbu(pair(sentence(5),[a,man,sleeps])).

insert_every_other(N,_Rp):- N =< 0,!.
insert_every_other(N,Rp):- 
	trie_shas_insert(Rp,pair(N,N)),
	N1 is N - 2,
	insert_every_other(N1,Rp).

delete_every_other(N,_Rp):- N =< 0,!.
delete_every_other(N,Rp):- 
	trie_shas_delete(Rp,N),
	N1 is N - 2,
	delete_every_other(N1,Rp).

check_shared_trie(0,_Rp):- !.
check_shared_trie(N,Rp):- 
	trie_shas_unify(Rp,pair(N,N)),
	N1 is N - 1,
	check_shared_trie(N1,Rp).

%------

time_shas(N,T):- 
	trie_create(Rp,[type(shas)]),
	cputime(B),
	shas_insert_n(N,Rp),
	shas_delete_n(N,Rp),
        cputime(E),
	T is E - B.

prge_insert_n(N,Rp):- 
	between(1,N,N1),
	prge_trie_insert(Rp,pair(N1,N1)),
	fail.
prge_insert_n(_,_).

prge_delete_n(N,Rp):- 
	between(1,N,N1),
	prge_trie_delete(Rp,pair(N1,N1)),
	fail.
prge_delete_n(_,_).
	
shas_insert_n(N,Rp):- 
	between(1,N,N1),
	trie_shas_insert(Rp,pair(N1,N1)),
	fail.
shas_insert_n(_,_).

shas_delete_n(N,Rp):- 
	between(1,N,N1),
	trie_shas_delete(Rp,N1),
	fail.
shas_delete_n(_,_).
	
:- import between/3 from basics.